#!/usr/bin/env bash
LC_ALL=C
#{{{ Bash settings
# set -o errexit
# set -o nounset
set -o pipefail
set -o errtrace
#}}}
main() {

    local SCRIPT_NAME
    local VERSION
    local -gi CLIPBOARD
    local -gi DEBUG
    local -gi SILENT
    local -gi RAW
    local -gi NOTIF_TIMEOUT
    local -gi CURRENT
    local -gi FREEZE
    local -g FILENAME
    local -g SAVE_FULLPATH
    local -g SAVEDIR
    local -g HYPRSHOT_DIR
    local -g OPTION
    local -g SELECTED_MONITOR
    local -gi HYPRPICKER_PID
    local -g HYPRSHOT_DIR

    SCRIPT_NAME="$(basename "${0}")"

    if [[ -z "${1}" ]]; then
        Help
        exit
    fi

    VERSION="1.4.0"
    CLIPBOARD=0
    DEBUG=0
    SILENT=0
    RAW=0
    NOTIF_TIMEOUT=5000
    CURRENT=0
    FREEZE=0
    FILENAME="$(date +'%Y-%m-%d-%H%M%S_hyprshot.png')"
    [[ -z "${XDG_PICTURES_DIR}" ]] && command -v xdg-user-dir &>/dev/null && XDG_PICTURES_DIR=$(xdg-user-dir PICTURES)
    [[ -z "${HYPRSHOT_DIR:-}" ]] && SAVEDIR="${XDG_PICTURES_DIR:=~}" || SAVEDIR="${HYPRSHOT_DIR}"
    ANNOTATE=0
    CURSOR=0
    NOCLIPBOARD=0

    args "${0}" "${@}"

    SAVE_FULLPATH="${SAVEDIR}/${FILENAME}"
    [[ "${CLIPBOARD}" -eq 0 ]] && Print "Saving in: %s\n" "${SAVE_FULLPATH}"
    select_helper
    begin_grab "${OPTION}" &
    checkRunning
}

function Help() {

    cat <<EOF
Usage: ${SCRIPT_NAME} [options ..] [-m [mode] ..] -- [command]

Hyprshot is an utility to easily take screenshot in Hyprland using your mouse.

It allows taking screenshots of windows, regions and monitors which are saved to a folder of your choosing and copied to your clipboard.

Examples:
  capture a window                                              '${SCRIPT_NAME} -m window'
  capture active window to clipboard                            '${SCRIPT_NAME} -m window -m active --clipboard-only'
  capture selected monitor                                      '${SCRIPT_NAME} -m output -m DP-1'
  capture selected window and calls an annotation tool after    '${SCRIPT_NAME} -m window -a'
  capture active window without clipboard copying               '${SCRIPT_NAME} -m window -m active --no-clipboard'

Options:
  -h, --help                show help message
  -m, --mode                one of: output, window, region, active, OUTPUT_NAME
  -o, --output-folder       directory in which to save screenshot
  -f, --filename            the file name of the resulting screenshot
  -D, --delay               how long to delay taking the screenshot after selection (seconds)
  -z, --freeze              freeze the screen on initialization
  -d, --debug               print debug information
  -s, --silent              don't send notification when screenshot is saved
  -r, --raw                 output raw image data to stdout
  -t, --notif-timeout       notification timeout in milliseconds (default 5000)
  --clipboard-only          copy screenshot to clipboard and don't save image in disk
  -v, --version             show current version
  -a, --annotate            pass capture to an annotation tool (auto choose satty or swappy if installed)
  -p, --viewport            to capture all screens at once
  --no-clipboard            take screenshot without copying it to the clipboard
  -- [command]              open screenshot with a command of your choosing. e.g. hyprshot -m window -- mirage

Modes:
  output        take screenshot of an entire monitor
  window        take screenshot of an open window
  region        take screenshot of selected region
  active        take screenshot of active window|output
  viewport      take screenshot of all workspaces as one image
                (you must use --mode again with the intended selection)
  OUTPUT_NAME   take screenshot of output with OUTPUT_NAME
                (you must use --mode again with the intended selection)
                (you can get this from 'hyprctl monitors')
EOF

}

function Print() {
    if [[ "${DEBUG}" -eq 0 ]]; then
        return 0
    fi

    printf 1>&2 "%b" "${@}"
}

function send_notification() {
    local message

    if [[ "${SILENT}" -eq 1 ]]; then
        return 0
    fi

    if [[ "${CLIPBOARD}" -eq 1 ]]; then
        message="Image copied to the clipboard"
    else
        [[ "${NOCLIPBOARD}" -eq 0 ]] && message="Image saved in '${1}' and copied to the clipboard." || message="Image saved in '${1}'."
    fi
    printf "%s\n" "${message}"

    if command -v notify-send >/dev/null; then
        notify-send "Screenshot saved" \
            "${message}" \
            --expire-time="${NOTIF_TIMEOUT}" --icon="${1}" --app-name=Hyprshot
    fi

}

function trim() {

    Print "Geometry: %s\n" "${1}"
    local geometry
    local xy_str
    local wh_str
    local cropped
    local store_values
    local -i x
    local -i y
    local -i width
    local -i height
    local -i max_width
    local -i max_height
    local -i min_x
    local -i min_y
    local -i cropped_x
    local -i cropped_y
    local -i cropped_width
    local -i cropped_height

    geometry="${1}"
    store_values="$(hyprctl monitors -j | jq --raw-output --compact-output '[.[] | {x:.x, y:.y,width:.width,height:.height,transform:.transform}]')"
    xy_str=$(printf "%s" "${geometry}" | cut --delimiter=' ' --fields=1)
    wh_str=$(printf "%s" "${geometry}" | cut --delimiter=' ' --fields=2)
    x=$(printf "%s" "${xy_str}" | cut --delimiter=',' --fields=1)
    y=$(printf "%s" "${xy_str}" | cut --delimiter=',' --fields=2)
    width=$(printf "%s" "${wh_str}" | cut --delimiter='x' --fields=1)
    height=$(printf "%s" "${wh_str}" | cut --delimiter='x' --fields=2)
    max_width="$(printf "%s" "${store_values}" | jq --raw-output --compact-output '[.[] | if (.transform % 2 == 0) then (.x + .width) else (.x + .height) end] | max')"
    max_height="$(printf "%s" "${store_values}" | jq --raw-output --compact-output '[.[] | if (.transform % 2 == 0) then (.y + .width) else (.y + .height) end] | max')"
    min_x="$(printf "%s" "${store_values}" | jq --raw-output --compact-output '[.[] | (.x) ] | min')"
    min_y="$(printf "%s" "${store_values}" | jq --raw-output --compact-output '[.[] | (.y) ] | min')"
    cropped_x="${x}"
    cropped_y="${y}"
    cropped_width="${width}"
    cropped_height="${height}"

    if ((x + width > max_width)); then
        cropped_width=$((max_width - x))
    fi
    if ((y + height > max_height)); then
        cropped_height=$((max_height - y))
    fi

    if ((x < min_x)); then
        cropped_x="${min_x}"
        cropped_width=$((cropped_width + x - min_x))
    fi
    if ((y < min_y)); then
        cropped_y="${min_y}"
        cropped_height=$((cropped_height + y - min_y))
    fi

    cropped=$(printf "%s,%s %sx%s\n" \
        "${cropped_x}" "${cropped_y}" \
        "${cropped_width}" "${cropped_height}")
    Print "Crop: %s\n" "${cropped}"
    printf "%s" "${cropped}"

}

function save_geometry() {

    local geometry
    local output

    geometry="${1}"
    output=""

    if [[ "${RAW}" -eq 1 ]]; then
        ${GRABBER} -g "${geometry}" -
        return 0
    fi

    if [[ "${ANNOTATE}" -eq 1 ]]; then
        ${GRABBER} -g "${geometry}" - | annotate
        return 0
    fi

    if [[ "${CLIPBOARD}" -eq 0 ]]; then
        output="${SAVE_FULLPATH}"

        if [[ ! -d "${SAVEDIR}" ]]; then
            mkdir --parents "${SAVEDIR}"
        fi

        ${GRABBER} -g "${geometry}" "${SAVE_FULLPATH}"

        if [[ "${NOCLIPBOARD}" -eq 0 ]]; then
            wl-copy --type image/png <"${output}"
        fi

        if [[ -n "${COMMAND}" ]]; then
            "${COMMAND}" "${output}"
        fi

    else
        wl-copy --type image/png < <(${GRABBER} -g "${geometry}" -)
    fi

    send_notification "${output}"

}

function checkRunning() {

    if [[ "${FREEZE}" -eq 1 ]]; then
        sleep 1s
        pidwait --count slurp
        pkill --count --echo hyprpicker
    fi

}

function begin_grab() {

    local option
    local geometry

    if [[ "${FREEZE}" -eq 1 ]] && [[ "$(command -v "hyprpicker")" ]] >/dev/null 2>&1; then
        hyprpicker --render-inactive --no-zoom &
        sleep 0.2
        HYPRPICKER_PID="${!}"
        Print "Hyperpicker PID: %s\n" ${HYPRPICKER_PID}
    fi

    option="${1}"

    case "${option}" in
    output)
        if [[ "${CURRENT}" -eq 1 ]]; then
            geometry=$(grab_active_output)
        elif [[ -z "${SELECTED_MONITOR}" ]]; then
            geometry=$(grab_output)
        else
            geometry=$(grab_selected_output "${SELECTED_MONITOR}")
        fi
        ;;
    region)
        geometry=$(grab_region)
        ;;
    window)
        if [[ "${CURRENT}" -eq 1 ]]; then
            geometry=$(grab_active_window)
        else
            geometry=$(grab_window)
        fi
        geometry=$(trim "${geometry}")
        ;;
    viewport)
        do_viewport
        exit 0
        ;;
    esac
    if [[ "${DELAY}" -gt 0 ]] 2>/dev/null; then
        sleep "${DELAY}"
    fi
    save_geometry "${geometry}"
    printf "Area captured %s\n" "${geometry}"

}

function grab_output() {
    slurp -or

}
# For taking screenshot of all displays/screens. Won't ignore reserved areas etc
function do_viewport() {
    ${GRABBER} "${SAVE_FULLPATH}"
    grab_viewport
    send_notification "${SAVE_FULLPATH}"
}

function grab_viewport() {
    local -i full_width
    local -i highest_height

    monitors_information="$(hyprctl monitors -j | jq --raw-output --compact-output '.[] | select(.disabled == false ) | {name: .name, width: .width, height: .height}')"
    monitors_names="$(printf "%s" "${monitors_information}" | jq --raw-output --compact-output '.name')"
    full_width="$(hyprctl monitors -j | jq --raw-output --compact-output '[.[] | .width | tonumber] | add')"
    highest_height="$(hyprctl monitors -j | jq --raw-output --compact-output '[.[] | .width ] | max')"

    printf "Viewport width: %s and Height: %s\n Outputs: %b\n" "${full_width}" "${highest_height}" "${monitors_names}"

}

function grab_active_output() {

    local active_workspace
    local monitors
    local -i active_workspace_id
    local current_monitor

    active_workspace=$(hyprctl -j activeworkspace)
    monitors=$(hyprctl -j monitors)
    active_workspace_id="$(printf "%s" "${active_workspace}" | jq --raw-output --compact-output '.id')" # returns id as int
    current_monitor="$(printf "%s" "${monitors}" | jq --raw-output --compact-output 'first(.[] | select(.activeWorkspace.id == '"${active_workspace_id}"'))')"

    Print "Monitors: %s\n" "${monitors}"
    Print "Active workspace: %s\n" "${active_workspace}"
    Print "Current output: %s\n" "${current_monitor}"
    printf "%s" "${current_monitor}" | jq --raw-output --compact-output '"\(.x),\(.y) \(.width/.scale|round)x\(.height/.scale|round)"'
}

function grab_selected_output() {
    local monitor
    local monitor_name

    monitor_name="$(printf "%s" "${1:-}")"
    monitor=$(hyprctl -j monitors | jq --raw-output --compact-output '.[] | select(.name == "'"${monitor_name}"'")')

    Print "Capturing: %s\n" "${1}"
    printf "%s" "${monitor}" | jq --raw-output --compact-output '"\(.x),\(.y) \(.width/.scale|round)x\(.height/.scale|round)"'
}

function grab_region() {
    slurp -d
}

function grab_window() {
    local monitors
    local clients
    local boxes

    monitors=$(hyprctl -j monitors)
    get_monitors="$(printf "%s\n" "${monitors}" | jjq --raw-output --compact-output 'map(.activeWorkspace.id) | join(",")')"
    clients=$(hyprctl -j clients | jq --raw-output --compact-output '[.[] | select(.workspace.id | contains('"${get_monitors}"'))]')
    boxes="$(printf "%s\n" "${clients}" | jq --raw-output --compact-output '.[] | "\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1]) \(.title)"' | cut --fields=1,2 --delimiter=' ')"

    Print "Monitors: %s\n" "${monitors}"
    Print "Clients: %s\n" "${clients}"
    # Generate boxes for each visible window and send that to slurp
    # through stdin
    Print "Boxes:\n%s\n" "${boxes}"
    slurp -r <<<"${boxes}"

}

function grab_active_window() {

    local active_window
    local box

    active_window=$(hyprctl -j activewindow)
    box=$(printf "%s" "${active_window}" | jq --raw-output --compact-output '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"' | cut --fields=1,2 --delimiter=' ')

    Print "Box:\n%s\n" "${box}"
    printf "%s" "${box}"

}

function validate_modes() {

    local "${1}"
    shift
    local -a AVAILABLE_MODES
    local -i elements
    AVAILABLE_MODES=(
        "window"
        "region"
        "output"
        "active"
        "viewport"
    )
    elements="${#AVAILABLE_MODES[@]}"

    # Print "A mode is required\n\nAvailable modes are:\n\toutput\n\tregion\n\twindow\n"

    if [[ ! "${mode}" =~ ${AVAILABLE_MODES[*]} ]]; then
        if [[ "${mode}" == "" ]]; then
            printf "'%s' is not a known mode\nValid modes are:\n" "${mode}"
        else
            printf "A mode is required\n"
        fi
        for m in "${!AVAILABLE_MODES[@]}"; do
            if [[ "${m}" -eq 0 ]]; then
                printf "%s" "${AVAILABLE_MODES[$m]}"
            elif [[ "${m}" -eq $((elements - 1)) ]]; then
                printf " and %s" "${AVAILABLE_MODES[$m]}"
            else
                printf ", %s" "${AVAILABLE_MODES[$m]}"
            fi
        done
        exit 1
    fi

    if [[ "${mode}" == "active" ]]; then
        if [[ "${#@}" -lt 4 ]]; then
            printf "Error! %s needs to be use in conjunction with window or output.\n e.g. %s --mode output --mode active" "${mode}" "${SCRIPT_NAME}"
            exit 1

        fi
    fi

}

function parse_mode() {

    local mode
    mode="${1}"

    case "${mode}" in
    window | region | output | viewport)
        OPTION="${mode}"
        ;;
    active)
        CURRENT=1
        ;;
    *)
        # Could make sense of this
        # hyprctl monitors -j | jq --raw-output --exit-status '.[] | select(.name == "'"${mode}"'")' &>/dev/null
        validate_modes "${mode}"
        SELECTED_MONITOR="${mode}"
        ;;
    esac

}

function args() {

    local options
    options=$(getopt --options hf:o:m:D:dszrt:va --longoptions help,filename:,output-folder:,mode:,delay:,clipboard-only,debug,silent,freeze,raw,notif-timeout:,version,annotate,cursor,no-clipboard -- "$@")

    eval set -- "${options}"

    while true; do
        case "${1}" in
        -h | --help)
            Help
            exit
            ;;
        -o | --output-folder)
            shift
            SAVEDIR="${1}"
            ;;
        -f | --filename)
            shift
            FILENAME="${1}"
            ;;
        -D | --delay)
            shift
            DELAY="${1}"
            ;;
        -m | --mode)
            shift
            parse_mode "${1}"
            ;;
        --clipboard-only)
            CLIPBOARD=1
            ;;
        -d | --debug)
            DEBUG=1
            ;;
        -z | --freeze)
            FREEZE=1
            ;;
        -s | --silent)
            SILENT=1
            ;;
        -r | --raw)
            RAW=1
            ;;
        -t | --notif-timeout)
            shift
            NOTIF_TIMEOUT="${1}"
            ;;
        -v | --version)
            shift
            printf "Hyprshot version: %s\n" "${VERSION}"
            ;;
        -a | --annotate)
            ANNOTATE=1
            ;;
        --cursor)
            CURSOR=1
            ;;
        --no-clipboard)
            NOCLIPBOARD=1
            ;;
        --)
            shift # Skip -- argument
            COMMAND="${*:2}"
            break
            ;;
        esac
        shift
    done

    # This looks like is never gonna be reached
    # if [[ -z "${OPTION}" ]]; then
    #     Print "A mode is required\n\nAvailable modes are:\n\toutput\n\tregion\n\twindow\n"
    #     exit 2
    # fi

}

function annotate() {

    local -a annotation_tools
    local -a is_installed
    annotation_tools=(
        "satty"
        "swappy"
    )
    for at in "${annotation_tools[@]}"; do
        if command -v "${at}" >/dev/null; then
            is_installed+=("${at}")
        fi
    done
    sleep 0.2 # without this satty was receiving blurry images somehow. Dunno.
    if [[ "${#is_installed[@]}" -eq 0 ]]; then
        printf "Error! Did not find an annotation tool installed. Looked for %s and %s\n" "${annotation_tools[0]}" "${annotation_tools[1]}"
        exit 1
    elif [[ "${#is_installed[@]}" -gt 1 ]]; then
        satty --filename - --output-filename "${SAVE_FULLPATH}" --action-on-enter save-to-file || return 0
    else
        swappy --file - --output-file "${SAVE_FULLPATH}" || return 0
    fi

}

function select_helper() {

    local -a capture_helper
    local -a is_installed
    local -g GRABBER
    capture_helper=(
        "grim"
        "wayshot"
    )
    for ch in "${capture_helper[@]}"; do
        if command -v "${ch}" >/dev/null; then
            is_installed+=("${ch}")
        fi
    done

    if [[ "${#is_installed[@]}" -eq 0 ]]; then
        printf "Error! Couldn't find %s or %s\n" "${capture_helper[0]}" "${capture_helper[1]}"
        exit 1
    elif [[ "${#is_installed[@]}" -gt 1 ]]; then
        [[ "${CURSOR}" -eq 1 ]] && GRABBER="grim -c" || GRABBER="grim"
    else
        [[ "${CURSOR}" -eq 1 ]] && GRABBER="wayshot -c" || GRABBER="wayshot"
    fi

}

main "${@}"
